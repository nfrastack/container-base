# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

nfra_parse_secrets() {
    transform_var file \
                        SECRET_BACKEND \
                        SECRET_FILE_GROUP \
                        SECRET_FILE_PERMISSIONS \
                        SECRET_FILE_USER \
                        SECRET_HOST \
                        SECRET_IDENTITY \
                        SECRET_TARGET_PATH \
                        SECRET_TOKEN \
                        SECRET_TYPE

    transform_var tonum_01 \
                        SECRET_BACKEND \
                        SECRET_FILE_GROUP \
                        SECRET_FILE_PERMISSIONS \
                        SECRET_FILE_USER \
                        SECRET_HOST \
                        SECRET_IDENTITY \
                        SECRET_TARGET_PATH \
                        SECRET_TOKEN \
                        SECRET_TYPE

    secretnum=$(printenv | sort | grep -cE '^SECRET([0-9].)_IDENTITY')
    for (( secret = 01; secret <= secretnum; secret++ )) ; do
        secret=$(printf "%02d" $secret)
        transform_var file \
                            SECRET"${secret}"_BACKEND \
                            SECRET"${secret}"_FILE_GROUP \
                            SECRET"${secret}"_FILE_PERMISSIONS \
                            SECRET"${secret}"_FILE_USER \
                            SECRET"${secret}"_HOST \
                            SECRET"${secret}"_IDENTITY \
                            SECRET"${secret}"_TARGET_PATH \
                            SECRET"${secret}"_TOKEN \
                            SECRET"${secret}"_TYPE

        transform_var populate SECRET"${secret}"_BACKEND SECRET_BACKEND mandatory

        case "${SECRET_BACKEND,,}" in
            openbao | vault | bao )
                _secret_backend=openbao
            ;;
            * )
                _secret_backend=${SECRET_BACKEND,,}
            ;;
        esac

        case "${_secret_backend}" in
            * )
                if [ -f /container/base/defaults/secrets/"${_secret_backend}" ]; then source /container/base/defaults/secrets/"${_secret_backend}"; fi
                if [ -f /container/base/functions/secrets/"${_secret_backend}" ]; then source /container/base/functions/secrets/"${_secret_backend}" ; fi
                if [ -f /override/base/defaults/secrets/"${_secret_backend}" ]; then source /container/base/defaults/secrets/"${_secret_backend}"; fi
                if [ -f /override/base/functions/secrets/"${_secret_backend}" ]; then source /override/base/functions/secrets/"${_secret_backend}" ; fi
                transform_var populate SECRET"${secret}"_FILE_GROUP SECRET_FILE_GROUP mandatory
                transform_var populate SECRET"${secret}"_FILE_PERMISSIONS SECRET_FILE_PERMISSIONS mandatory
                transform_var populate SECRET"${secret}"_FILE_USER SECRET_FILE_USER mandatory
                transform_var populate SECRET"${secret}"_HOST SECRET_HOST mandatory
                transform_var populate SECRET"${secret}"_IDENTITY SECRET_IDENTITY mandatory
                transform_var populate SECRET"${secret}"_TARGET_PATH SECRET_TARGET_PATH mandatory
                transform_var populate SECRET"${secret}"_TOKEN SECRET_TOKEN mandatory
                transform_var populate SECRET"${secret}"_TYPE SECRET_TYPE mandatory
                call _nfra_secrets_"${_secret_backend}"
            ;;
        esac
    done
}
