# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

package() {
    build() {
        case "${1}" in
            go )
                if ! command -v go >/dev/null 2>&1 ; then
                    echo "Go not installed, installing..."
                    mkdir -p /usr/src/go
                    GOLANG_VERSION="${GOLANG_VERSION:-"$(curl -sSL https://golang.org/VERSION?m=text | head -n1 | sed "s|^go||g")"}"
                    curl -sSLk https://dl.google.com/go/go"${GOLANG_VERSION}".linux-"$(container_info arch alt)".tar.gz | tar xvfz - --strip 1 -C /usr/src/go
                    ln -sf /usr/src/go/bin/go /usr/local/bin/
                    ln -sf /usr/src/go/bin/godoc /usr/local/bin/
                    ln -sf /usr/src/go/bin/gfmt /usr/local/bin/
                fi
            ;;
            yq )
                YQ_REPO_URL=${YQ_REPO_URL:-"https://github.com/mikefarah/yq"}
                YQ_VERSION=${YQ_VERSION:-$(curl -s ${YQ_REPO_URL/github.com/api.github.com\/repos}/releases/latest | sed -n 's/.*"tag_name": "\([^"]*\)".*/\1/p')}
                clone_git_repo \
                                    "${YQ_REPO_URL}" \
                                    "${YQ_VERSION}" \
                                /usr/src/yq
                \
                go build \
                            -ldflags "\
                                        -s \
                                        -w \
                                        -X ${YQ_REPO_URL/https:\/\//}/v4/version.Version=${YQ_VERSION} \
                                      " \
                            -o /usr/local/bin/yq \
                            &&
                    container_build_log add "YQ" "${YQ_VERSION}" "${YQ_REPO_URL}"
                ;;
        esac
    }

    cleanup() {
        case "${distro}" in
            "alpine" )
                rm -rf /var/cache/apk/*
            ;;
            "debian" | "ubuntu" )
                apt-get clean -y
                rm -rf /var/lib/apt/lists/*
            ;;
        esac

        for symlink in \
                            /usr/local/bin/go \
                            /usr/local/bin/godoc \
                            /usr/local/bin/gfmt \
                        ; do \
            if [ -L "${symlink}" ] && ! [ -e "${symlink}" ]; then
                rm -f "${symlink}"
            fi
        done

        rm -rf \
                /build-assets \
                /etc/logrotate.d/{*,.??*} \
                /root/{*,.??*} \
                /tmp/{*,.??*} \
                /usr/share/doc/{*,.??*} \
                /usr/share/locale/{*,.??*} \
                /usr/share/man/{*,.??*} \
                /usr/src/{*,.??*} \
                /var/log/{*,.??*} \
                /var/tmp/{*,.??*}
    }

    ## Looks for environment variable suffixed with _OS and then either explodes the list or creates the package list depending on OS. If there is no match, then wait until the end of the loop and install packages.
    ## Usage: package install BUILD_DEPS packagename packagename
    ##                        SCANNED_RUNTIME_DEPS is a special case to scan /usr/local for shared library dependencies and install the required packages
    install() {
        local _packages_to_install
        case "${distro}" in
            "alpine" )
                _package_install_list="$@"
                if [[ "${1}" =~ ^\..* ]] ; then
                    local dependencies="-t "
                    apk add -t $@
                else
                    for _package in $_package_install_list ; do
                        if [[ "${_package}" =~ (_BUILD_DEPS|_RUN_DEPS)$ ]] && ! [ -v "${_package^^}_ALPINE" ]; then
                            continue
                        fi

                        if [ "${_package}" = "SCANNED_RUNTIME_DEPS" ]; then
                           local _scanned_raw _scanned_pkgs
                           _scanned_raw=$(scanelf --needed --nobanner --recursive /usr/local \
                                                 | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                                                 | sort -u \
                                                 | xargs -r apk info --installed 2>/dev/null || :)
                           _scanned_pkgs=$(printf '%s\n' "${_scanned_raw}" \
                                           | tr -s '[:space:]' '\n' \
                                           | sed '/^$/d' \
                                           | sort -u \
                                           | tr '\n' ' ' \
                                           | sed -E 's/  +/ /g; s/^ //; s/ $//')
                           if [ -n "${_scanned_pkgs}" ]; then
                               apk add -t .scanned_runtime_deps ${_scanned_pkgs}
                           fi
                           continue
                        fi

                        if [ -v "${_package^^}"_ALPINE ] ; then
                           local _packages
                           _packages=$(set -o posix; set | grep -E "^${_package^^}_ALPINE" | cut -d = -f 2 | sed 's/ \{1,\}/ /g' | xargs)
                           apk add -t ."${_package,,}" ${_packages}
                        else
                           _packages_to_install+=" ${_package} "
                        fi
                    done
                    if [ -n "${_packages_to_install}" ] ; then
                        apk add ${_packages_to_install}
                    fi
                fi
            ;;
            "debian" | "ubuntu" )
                _package_install_list="$@"
                if [[ "${1}" =~ ^\..* ]] ; then
                    shift
                    apt-get install -y --no-install-recommends $@
                else
                    for _package in $_package_install_list ; do
                        if [[ "${_package}" =~ (_BUILD_DEPS|_RUN_DEPS)$ ]] && ! [ -v "${_package^^}_DEBIAN" ]; then
                            continue
                        fi
                        if [ "${_package}" = "SCANNED_RUNTIME_DEPS" ]; then
                           :
                           continue
                        fi
                        if [ -v "${_package^^}"_DEBIAN ] ; then
                            local _packages
                            _packages=$(set -o posix; set | grep -E "^${_package^^}_DEBIAN" | cut -d = -f 2 | sed 's/ \{1,\}/ /g' | xargs)
                            apt-get install -y --no-install-recommends ${_packages}
                         else
                             _packages_to_install+=" ${_package} "
                         fi
                     done
                         if [ -n "${_packages_to_install}" ] ; then
                             apt-get install -y --no-install-recommends ${_packages_to_install}
                         fi
                 fi
            ;;
        esac
    }

    ## Looks for environment variable suffixed with _OS and then either explodes the list or references the package list depending on OS. If there is no match, then wait until the end of the loop and uninstall
    ## Usage: package remove BUILD_DEPS packagename packagename
    remove() {
        case "${distro}" in
            "alpine" )
                # Use an array to avoid mutating the list while iterating
                local _removal_args=("$@")
                local _final_removal_list=""
                for _package in "${_removal_args[@]}"; do
                    if [ -v "${_package^^}_ALPINE" ]; then
                        _final_removal_list+=" .${_package,,}"
                    elif [[ "${_package}" =~ (_BUILD_DEPS|_RUN_DEPS)$ ]] && ! [ -v "${_package^^}_ALPINE" ]; then
                        continue
                    else
                        _final_removal_list+=" ${_package}"
                    fi
                done

                _final_removal_list=$(echo "${_final_removal_list}" | xargs)
                if [ -n "${_final_removal_list}" ]; then
                    apk del ${_final_removal_list}
                fi
            ;;
            "debian" | "ubuntu" )
                local _removal_args=("$@")
                local _final_removal_list=""
                for _package in "${_removal_args[@]}"; do
                    if [ -v "${_package^^}_DEBIAN" ]; then
                        local _packages
                        _packages=$(set -o posix; set | grep -E "^${_package^^}_DEBIAN" | cut -d = -f 2 | sed 's/ \{1,\}/ /g' | xargs)
                        _final_removal_list+=" ${_packages}"
                    elif [[ "${_package}" =~ (_BUILD_DEPS|_RUN_DEPS)$ ]] && ! [ -v "${_package^^}_DEBIAN" ]; then
                        continue
                    else
                        _final_removal_list+=" ${_package}"
                    fi
                done

                _final_removal_list=$(echo "${_final_removal_list}" | xargs)
                if [ -n "${_final_removal_list}" ]; then
                    apt-get purge -y ${_final_removal_list}
                    apt-get autoremove -y
                fi
            ;;
        esac
    }

    repo() {
        ## Usage:
        ##   package repo add <repo_name> <repo_url_and_suite> [keyring_name]
        ##     package repo add myrepo "https://example.com/apt stable main" example-archive-keyring.gpg
        ##     This will create /etc/apt/sources.list.d/myrepo.list with the correct signed-by reference if keyring_name is provided.
        ##   package repo key <url> <keyring_name>
        ##     package repo key https://example.com/repo.gpg example-archive-keyring.gpg
        ##     This will create /usr/share/keyrings/example-archive-keyring.gpg for use in sources.list
        case "${1}" in
            add )
                case "${distro}" in
                    "alpine" )
                        case "${2,,}" in
                            "testing" )
                                echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
                                return
                            ;;
                        esac

                        if [ -n "${3}" ] ; then
                            _package_repo_name="${2}"
                            shift 2
                            echo "$@" > /etc/apk/repositories/"${_package_repo_name}"
                        fi
                    ;;
                    "debian" | "ubuntu" )
                        # Shortcuts
                        case "${2,,}" in
                            backports )
                                echo "deb http://deb.debian.org/debian $(container_info variant)-backports main" >> /etc/apt/sources.list.d/backports.list
                                return
                            ;;
                            node )
                                if [ -n "${3}" ] ; then
                                    NODE_VERSION="${3}"
                                else
                                    NODE_VERSION="${NODE_VERSION:-"$(curl -s https://nodejs.org/dist/index.json | grep -B2 '"lts"' | grep '"version":' | head -n 1 | sed -E 's/.*"version": *"(v[^"]+)".*/\1/' | sed 's/^v//')"}"
                                fi
                                package repo key https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key nodeauto.gpg
                                package repo add nodejsauto "https://deb.nodesource.com/node_${NODE_VERSION:0:2}.x nodistro main" nodeauto.gpg
                                return
                            ;;
                            mariadb )
                               if [ -n "${3}" ] ; then
                                    MARIADB_VERSION="${3}"
                                else
                                    MARIADB_VERSION="${MARIADB_VERSION:-"$(curl -sSLk https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | grep "mariadb_server_version=mariadb-" | head -n 1 | cut -d = -f 2 | cut -d - -f 2)"}"
                                fi
                                package repo key https://mariadb.org/mariadb_release_signing_key.asc mariadbsql.gpg
                                package repo add mariadbsql "https://mirror.its.dal.ca/mariadb/repo/${MARIADB_VERSION}/debian $(container_info variant) main" mariadbsql.gpg
                                return
                            ;;
                            postgres )
                                package repo key https://www.postgresql.org/media/keys/ACCC4CF8.asc postgresql.gpg
                                package repo add postgresql "https://apt.postgresql.org/pub/repos/apt $(container_info variant)-pgdg main" postgresql.gpg
                                return
                            ;;
                            yarn )
                                package repo key https://dl.yarnpkg.com/debian/pubkey.gpg yarnpm.gpg
                                package repo add yarnpm "https://dl.yarnpkg.com/debian stable main" yarnpm.gpg
                                return
                            ;;
                        esac
                        _package_repo_name="${2}"
                        # Shift off 'add' and repo_name, so $@ is now: <repo_url_and_suite> [keyring_name]
                        shift 2
                        # If last argument ends with .gpg, treat as keyring_name
                        if [[ "${@: -1}" == *.gpg ]]; then
                            keyring_name="${@: -1}"
                            repo_line="${*:1:$(($#-1))}"
                        else
                            keyring_name=""
                            repo_line="$*"
                        fi
                        if [ -n "${keyring_name}" ]; then
                            echo "deb [signed-by=/usr/share/keyrings/${keyring_name}] ${repo_line}" > /etc/apt/sources.list.d/"${_package_repo_name}".list
                        else
                            echo "deb ${repo_line}" > /etc/apt/sources.list.d/"${_package_repo_name}".list
                        fi
                    ;;
                esac
            ;;
            key )
                ## apt-key is gone with trixie and newer - also works with bookworm
                ## package repo key <url> <keyring_name>
                ## package repo key https://example.com/repo.gpg example-archive-keyring.gpg
                ## This will create /usr/share/keyrings/example-archive-keyring.gpg for use in sources.list
                case "${distro}" in
                    "debian" | "ubuntu" )
                        local key_url="${2}"
                        local keyring_name="${3:-example-archive-keyring.gpg}"
                        curl -fsSL "${key_url}" | gpg --dearmor --batch --yes -o "/usr/share/keyrings/${keyring_name}"
                    ;;
                esac
            ;;
        esac
    }

    update() {
        case "${distro}" in
            "alpine" )
                apk update
            ;;
            "debian" | "ubuntu" )
                apt-get update
            ;;
        esac
    }

    upgrade() {
        case "${distro}" in
            "alpine" )
                apk upgrade
            ;;
            "debian" | "ubuntu" )
                apt-get upgrade -y
            ;;
        esac
    }

    output_off
    local distro
    distro=$(container_info distro)
    local action="${1}"
    shift
    local arguments=("$@")

    case "${action}" in
        add | install )
            action=install
            "${action}" "${arguments[@]}"
        ;;
        build )
            action=build
            "${action}" "${arguments[@]}"
        ;;
        delete | remove | uninstall )
            action=remove
            "${action}" "${arguments[@]}"
        ;;
        repo )
            action=repo
            "${action}" "${arguments[@]}"
        ;;
        * )
            "${action}" "${arguments[@]}"
        ;;
    esac
    output_on
}
