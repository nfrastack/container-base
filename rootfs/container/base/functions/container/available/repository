# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

clone_git_repo() {
    ## Cut down on the space and size required to clone a repository if you are pulling a specific tag or branch
    ## Usage: clone_git_repo https://github.com/maintainer/repo <branch/tag/commit> <custom_dest>
    ## It will automatically create a folder in /usr/src/<repo name> eg repo and also expose a variable called GIT_REPO_SRC and GIT_REPO_SRC_<REPONAME> in caps
    ## Any special characters get removed other than numbers and letters

    if [[ "${BASH_SOURCE}" =~ ^\/container\/base\/functions\/container\/[build.d|run.d] ]] ; then set +x; fi
    if [ ${DEBUG_MODE,,} = "true" ] ; then set -x ; fi
    if ! [ -x "$(command -v git)" ]; then
        echo '[clone_git_repo] Git is not installed'
        exit 1
    else
        git config --global init.defaultBranch main
    fi

    if [ -n "${1}" ] ; then
        if [ -n "${3}" ] ; then
            repo="${3}/"
            repo_text="to '${3}'"
            repo_name="$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
        else
            repo="/usr/src/$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
            repo_name="$(echo ${1,,} | sed -e "s|-|_|g" -e "s|\.git||g" | awk -F/ '{print $NF}' | sed 's/[^a-zA-Z0-9_]//g')"
        fi

        export GIT_REPO_SRC=${GIT_REPO_SRC:-"${repo}"}
        export GIT_REPO_SRC_${repo_name^^}="${repo}"
        if [ -d "${repo}" ] ; then
            echo "[clone_git_repo] Directory ${repo_path}${repo} already exists. Cannot clone"
            exit 1
        else
            if [[ $1 == *".git" ]] ; then
                :
            else
                append_git_prefix=".git"
            fi

            mkdir -p "${repo}"
            cd "${repo}"
            git init .
            git remote add origin "${1}"${append_git_prefix}
            if [ -n "${2}" ] ; then repo_commit="${2}" ; fi
            echo "[clone_git_repo] Cloning Git Repo '${1}' '${2}' ${repo_text}"
            local le ts
            ts="$(TZ=$TIMEZONE date +'%Y-%m-%d %H:%M:%S %Z')"
            le="${ts} | CLONE: ${2} | ${1}"
            echo "$le" | tee -a /container/build/"${IMAGE_NAME/\//_}"/build.log /container/build/build.log > /dev/null
            git fetch --depth=1 origin ${2} +refs/tags/*:refs/tags/*
            git fetch --depth 1 origin ${2}
            git -c advice.detachedHead=false checkout FETCH_HEAD
            git submodule update --init
        fi
    else
        echo "[clone_git_repo] You tried to call the function but there's no arguments"
        exit 1
    fi

    if [[ "${BASH_SOURCE}" =~ ^\/container\/base\/functions\/container\/[build.d] ]] ; then set -x; fi
}

container_base() {
    case "${1}" in
        refresh )

            local _cr_base_repo_url
            local _cr_base_version
            local _cr_base_git

            if [ -n "${3}" ] ; then
                _cr_base_repo_url="${3}"
            else
                _cr_base_repo_url="${IMAGE_BASE_REPO_URL}"
            fi

            if [ -n "${2}" ] ; then
                _cr_base_version="${2}"
            else
                _cr_base_version="${IMAGE_BASE_VERSION}"
            fi

            if ! command -v "git" &> /dev/null ; then
                package install git
                _cr_base_git=true
            fi

            clone_git_repo "${_cr_base_repo_url}" "${_cr_base_version}" /usr/src/container-base

            rm -rf /container/base
            cp -aR \
                    /usr/src/container-base/rootfs/container/base \
                /container/

            cp -aR \
                    /usr/src/container-base/rootfs/etc/cont-init.d/0-container \
                /etc/cont-init.d/0-container

            cp -a \
                    /usr/src/container-base/CHANGELOG.md \
                    /usr/src/container-base/LICENSE \
                    /usr/src/container-base/README.md \
                /container/build/nfrastack_base/

            if [ "${_cr_base_version}" = "main" ]; then _cr_base_version=$(git log -1 --pretty="format:%H" -- /usr/src/container-base) ; fi
            echo "$(TZ=$TIMEZONE date +'%Y-%m-%d %H:%M:%S %Z') | ${_cr_base_version} | ${_cr_base_repo_url}" | tee -a /container/build/nfrastack_base/fetch.log /container/build/build.log > /dev/null

            if var_true "${_cr_base_git}" ; then
                package remove git
            fi

            rm -rf /usr/src/container-base
        ;;
    esac
}